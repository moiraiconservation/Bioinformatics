ALIGNMENT
 The objects and functions in this file are divided into three general categories as follows:  
(1) Objects and functions associated with the management of multithreading.  These include the onmessage function, and the Alignment constructor along with its two  primary methods add_job and create_worker.
(2) Functions associated with single-thread tasks.  These can be further divided into (a) primary functions associated with the analysis of protein or nucleotide sequences, and (b) secondary supporting functions that provide mathematical and string manipulation capabilities.
 (3) Functions associated with multithread tasks (and which usually consist of series of calls to single-thread tasks.
 Both, multithread functions and single-thread primary functions are expected to take the       following three arguments:
(1) query: This argument represents the protein or nucleotide sequence that is being investigated.  Traditionally, this sequence will correspond to the i index (rows) of a scoring or dynamic programming matrix.
(2) subject: This argument represents a single protein or nucleotide sequence object, or an array of protein or nucleotide sequences objects.  The "subject" contains the sequence (or sequences) that the query is being search against or aligned against, and traditionally this will correspond to the j index (columns) of a scoring or dynamic programming matrix. For single-thread primary functions, the subject should consist of a single object with the proper character sequence stored in the  "sequence" element.  For multithread functions, the subject should consist of an array of objects, each with its own sequence element.  For these functions, actions applied to each element of the subject array will be passed to separate threads. 
(3) options: This argument represents an object of Booleans, integers, and floating-point values intended to control the operation of the function.
Functions may also take a workerNumber argument.  This argument is used internally to manage multithreading, and should not be passed to the function by the user.

 THE REPORT OBJECT
Both multithread functions and single-thread primary functions are expected to return an  array consisting of one or more report objects.  Report objects may possess the folloing  elements:
score...............The overall raw score or sum score of an alignment.
nat_score...........The overall raw score or sum score of an alignment expressed in nats.
bit_score...........The overall raw score or sum score of an alignment expressed in bits.
expect..............The overall expect (E-value) of an alignment.
p_value.............The p-value of an alignment.
threshold...........The p-value significance threshold used for determining the statistical significance of an alignment.  This may vary based on the method of multiple significance testing correction used.
significant.........A Boolean indicating if the alignment is statistically significant (i.e., the p-value is below the threshold).
characters..........The number of characters in the query sequence.
identity............The number of characters in the query sequence that aligned to identical characters in the subject sequence.
percent_identity....identity / characters
hsp_gaps............The number of gaps in the query sequence between high-scoring segment pairs.  This statistic is used in calculating some versions of a sum score.
query...............The query sequence.
subject.............The subject sequence.
hsp.................An array containing high-scoring segment pair (HSP) objects associated with this alignment.  (See object structure below.)
batch...............An element used to keep track of objects during multithreading.
data................The associated subject object.  Including the data element allows for the possibility of passing additional user-defined data in with the subject array argument and having that data returned by the function.
THE HSP OBJECT
High-scoring segment pair (HSP) objects may include any of the following elements:
query...............The character sequence of the query that is within range of the HSP.
subject.............The character sequence of the subject that is within range of the HSP.                                                                
query_start.........The starting character number in the query sequence of the HSP.
query_end...........The ending character number in the query sequence of the HSP.
subject_start.......The starting character number in the subject sequence of the HSP.
subject_end.........The ending character number in the subject sequence of the HSP.
score...............The overall raw score of the HSP.
nat_score...........The overall raw score of the HSP expressed in nats.
bit_score...........The overall raw score of the HSP expressed in bits.
expect..............The overall expect (E-value) of the HSP.
p_value.............The p-value of the HSP.
characters..........The number of characters in the query sequence within the range of the HSP.
identity............The number of characters in the query sequence that aligned to identical characters in the subject sequence, within the range of the HSP.
percent_identity....(identity / characters) * 100
gaps................The total number of gap charactres in the query sequence.
percent_gaps........(gaps / characters) * 100
diagonal............A number indicating the specific "diagonal" that the HSP lies on.  In this case, the "diagonal" is the diagonal path of a real or hypothetical dynamic programing matrix, and can be calculated as query_start - subject_start.
centroid............The central tendency of an HSP, expressed as a pair of indices (one for the query segment and one for the subject segment).  These value can be calculated several different ways, including (but not limited to) the indices of the characters midway along the length of the query and subject sequences within the HSP range (standard method); the index positions within the HSP range for which half of the score of the HSP lies to either side (exonerate method); or the indices of the central characters within the highest scoring eleven-character word hit within the HSP (X-drop).  The calculate_hsp_centroids function takes a "method" argument that lets the user pick the method for calculation. 
centroid.query......The centroid index of the query segment.
centroid.subject....The centroid index of the subject segment.
extended............A Boolean indicating if the length of the HSP has been extend by one of the HSP extension functions.
gapped_alignment....A Boolean indicating if this HSP is the result of an alignment that allows gaps.
changed.............A Boolean indicating if this HSP has been altered in any way since the last time its statistics were calculated.
keep................A Boolean meant for internal use.  This value is set to true by default, but will be set to false if the HSP has been flagged for removal by a filtering function.  By definition, this element should always be set to true for any HSP returned to the user.
THE OPTIONS OBJECT
Currently used elements of the options object include:
multithreading..............A Boolean value indicating if multithreading will be used.
score.matrix................A 2-dimensional scoring matrix (e.g., PAM120 or BLOSUM62).
score.gap_open..............The affine gap opening penalty.  (Also called the gap existence penalty.)
score.gap_extend. ..........The affine gap extension penalty.
score.gapped................A Boolean value indicating if gaps are allowed within either an alignment or an HSP.
search_space.num_characters.The total number of sequence characters among all the entries in a subject database.  This value is used to calculate the adjusted search space (m'n').
search_space.num_sequences..The total number of entries in the subject database.  This value is used to calculate the adjusted search space (m'n').
seed.word_size..............The length in characters of the words to match between the query and subject sequences.
seed.score_threshold........The lowest allowed score for registering a match between words.
seed.exact_match............A Boolean indicating if only exact word matches between the query and subject sequences should be considered as hits.  If this option is set to true, then the word_score_threshold option will be ignored and all exact word matches will be considered.
seed.filter_low_complexity..A Boolean that indicates if low-complexity filtering should be applied.
seed.max_number.............The maximum number of seeds allowed between two sequences.  This option is provided as a safeguard to prevent extreme lengths of operation time when aligning two sequences, however by default this value is set very high (100 000).      
x_drop.X1...................When using the ungapped local alignment X-drop algorithm, this is the amount that a score is allowed to drop below the maximum observed score.  This value is in bits.
x_drop.X2...................When using the gapped local alignment X-drop algorithm, this is the amount that a score is allowed to drop below the maximum observed score is allowed to drop below the maximum observed score (within an antiparallel of a dynamic programming matrix).  Any scores that drop below this amount will not be recorded. This score is given in bits.
x_drop.X2_trigger...........When score.gapped is set to true, then an HSP must have a score above this trigger value (in bits) before it will be evaluated by the gapped x-drop algorithm (represented here by the Alignment.x_drop_extend function).
x_drop.X3...................When using a gapped global alignment X-drop algorithm, this is the amount that a score is allowed to drop below the maximum observed score is allowed to drop below the maximum observed score (within an antiparallel of a dynamic programming matrix).  Any scores that drop below this amount will not be recorded. This score is given in bits.
single_hit_algorithm........A Boolean that indicates if the original single-hit BLAST algorithm should be used.  If set to false, then the two-hit algorithm will be employed.
two_hit_window_size.........The window size used by the two-hit BLAST algorithm.  High-scoring segment pairs on the same diagonal must be within this window from each other to be extended.  By default, this value is set to the standard BLAST value of 40 characters.
expect_threshold............The expect (E-value) threshold for keeping high-scoring segment pairs.
batch.......................Used to pass multithreading information to functions.  This value is not intended to be set by the user.  If not explicitly set, default values will be used in place of available options.